// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: pb/run.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RunClient is the client API for Run service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RunClient interface {
	Chat(ctx context.Context, opts ...grpc.CallOption) (Run_ChatClient, error)
}

type runClient struct {
	cc grpc.ClientConnInterface
}

func NewRunClient(cc grpc.ClientConnInterface) RunClient {
	return &runClient{cc}
}

func (c *runClient) Chat(ctx context.Context, opts ...grpc.CallOption) (Run_ChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &Run_ServiceDesc.Streams[0], "/pb.Run/Chat", opts...)
	if err != nil {
		return nil, err
	}
	x := &runChatClient{stream}
	return x, nil
}

type Run_ChatClient interface {
	Send(*ChatNote) error
	Recv() (*ChatNote, error)
	grpc.ClientStream
}

type runChatClient struct {
	grpc.ClientStream
}

func (x *runChatClient) Send(m *ChatNote) error {
	return x.ClientStream.SendMsg(m)
}

func (x *runChatClient) Recv() (*ChatNote, error) {
	m := new(ChatNote)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RunServer is the server API for Run service.
// All implementations must embed UnimplementedRunServer
// for forward compatibility
type RunServer interface {
	Chat(Run_ChatServer) error
	mustEmbedUnimplementedRunServer()
}

// UnimplementedRunServer must be embedded to have forward compatible implementations.
type UnimplementedRunServer struct {
}

func (UnimplementedRunServer) Chat(Run_ChatServer) error {
	return status.Errorf(codes.Unimplemented, "method Chat not implemented")
}
func (UnimplementedRunServer) mustEmbedUnimplementedRunServer() {}

// UnsafeRunServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RunServer will
// result in compilation errors.
type UnsafeRunServer interface {
	mustEmbedUnimplementedRunServer()
}

func RegisterRunServer(s grpc.ServiceRegistrar, srv RunServer) {
	s.RegisterService(&Run_ServiceDesc, srv)
}

func _Run_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RunServer).Chat(&runChatServer{stream})
}

type Run_ChatServer interface {
	Send(*ChatNote) error
	Recv() (*ChatNote, error)
	grpc.ServerStream
}

type runChatServer struct {
	grpc.ServerStream
}

func (x *runChatServer) Send(m *ChatNote) error {
	return x.ServerStream.SendMsg(m)
}

func (x *runChatServer) Recv() (*ChatNote, error) {
	m := new(ChatNote)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Run_ServiceDesc is the grpc.ServiceDesc for Run service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Run_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Run",
	HandlerType: (*RunServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Chat",
			Handler:       _Run_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "pb/run.proto",
}
